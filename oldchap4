<exercise id="3" title="tidyr::gather()">

`gather()` is a special function in the `tidyr` package that takes columns and combines them into a single column. 
`gather()` has the following syntax:

```{r}
dem_score %>% gather(key=year, value=score, -country)
```
The first argument, `key`, is the name of our 'gathered' variable. We're smushing all of the columns that have year names and 
calling the column names, or the `key` the name of `year`. The second argument, `value`, is the actual observations. Finally, if we don't want a column to be gathered, we can leave it out with the `-` notation (here, `-country`).

### Instructions

+ Try out the above `gather` statement. 
+ Use a `mutate` expression to remove the `X` in front of `year`.  
+ Assign the output to `gatheredData`.

<codeblock id="04_03">
</codeblock>
</exercise>

<exercise id="4" title="tidyr::spread()">

`spread()` does the opposite of `gather()`. It "unbundles" a column into multiple columns.
This situation can happen because related measurements that consist of an observation are
collected separately, or someone has `gather`ed the data a little too enthusiastically.

`spread()` has the following syntax:

```{r}
gatheredData %>% spread(key=country, value=score)
```
We see that `spread()` takes two arguments: the first is the *key* column, which is the 
variable name that contains our column names of interest; the second is the *value* 
column, which is the variable that contains the values we want to fill with.

### Instructions

+ Let's transform our `gatheredData` into a matrix again, but with each column having a `country`. 
+ Assign the output to `spreadData`.

<codeblock id="04_04">
</codeblock>
</exercise>
